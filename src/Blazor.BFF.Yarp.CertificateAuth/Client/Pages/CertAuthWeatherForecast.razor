@page "/certAuthWeatherForecast"
@inject IHttpClientFactory httpClientFactory
@inject IJSRuntime JSRuntime
@using Blazor.BFF.Yarp.CertificateAuth.Shared

<h1>certificate Auth protected data downstream API with YARP</h1>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("getAntiForgeryToken");

        var client = httpClientFactory.CreateClient("authorizedClient");
        client.DefaultRequestHeaders.Add("X-XSRF-TOKEN", token);

        forecasts = await client.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    }
}
